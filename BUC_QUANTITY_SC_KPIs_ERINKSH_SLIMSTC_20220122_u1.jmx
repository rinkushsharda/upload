<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SC_KPIs" enabled="true">
      <stringProp name="TestPlan.comments">Author: ECGHJKC &lt;jiju.s@ericsson.com&gt;</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/home/eccd/scKpi/generateReport/generateReport.jar</stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="kubeconfig" elementType="Argument">
            <stringProp name="Argument.name">kubeconfig</stringProp>
            <stringProp name="Argument.value">${__P(kubeconfig,&quot;C:\Users\ecghjkc\OneDrive - Ericsson AB\KPI\slimConfig&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prefix" elementType="Argument">
            <stringProp name="Argument.name">prefix</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kpiConfigFile" elementType="Argument">
            <stringProp name="Argument.name">kpiConfigFile</stringProp>
            <stringProp name="Argument.value">${__P(kpiConfigFile,/home/zbrulci/sc_buc1334/generateReport/KPIConfig_7POs.xml)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="reportPath" elementType="Argument">
            <stringProp name="Argument.name">reportPath</stringProp>
            <stringProp name="Argument.value">${__P(reportPath,/home/zbrulci/sc_buc1334/generateReport)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">path should not container underscore &apos;_&apos;</stringProp>
          </elementProp>
          <elementProp name="reportName" elementType="Argument">
            <stringProp name="Argument.name">reportName</stringProp>
            <stringProp name="Argument.value">${__P(reportName,scKPIResults)}</stringProp>
            <stringProp name="Argument.desc">The name should not contain underscore &apos;_&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="overwrite" elementType="Argument">
            <stringProp name="Argument.name">overwrite</stringProp>
            <stringProp name="Argument.value">${__P(overwrite,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logFile" elementType="Argument">
            <stringProp name="Argument.name">logFile</stringProp>
            <stringProp name="Argument.value">${__P(logFile,/home/zbrulci/sc_buc1334/generateReport/log.jtl)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="buildNo" elementType="Argument">
            <stringProp name="Argument.name">buildNo</stringProp>
            <stringProp name="Argument.value">${__P(buildNo,22.0.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="standardXml" elementType="Argument">
            <stringProp name="Argument.name">standardXml</stringProp>
            <stringProp name="Argument.value">${__P(logFile,C:\Users\ecghjkc\code\e2e_performance_validation\generateReport\standardResults.xml)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="generateReport" elementType="Argument">
            <stringProp name="Argument.name">generateReport</stringProp>
            <stringProp name="Argument.value">${__P(generateReport,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JmeterTestStartTime" elementType="Argument">
            <stringProp name="Argument.name">JmeterTestStartTime</stringProp>
            <stringProp name="Argument.value">${__time()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="namespace" elementType="Argument">
            <stringProp name="Argument.name">namespace</stringProp>
            <stringProp name="Argument.value">${__P(namespace,perf)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="heading" elementType="Argument">
            <stringProp name="Argument.name">heading</stringProp>
            <stringProp name="Argument.value">${__P(heading,100_loop_7POs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cwtoken" elementType="Argument">
            <stringProp name="Argument.name">cwtoken</stringProp>
            <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0VTI1YVVKZEtFZG11V0ljNEU2ajIyNFhRUUU0MTlleTRoOGQyTFlXRkljIn0.eyJleHAiOjE2MjA2NjA3MTIsImlhdCI6MTYyMDA1NTkxMiwianRpIjoiMmIwMzBkYjYtNGJjNi00M2M5LWI1ZmQtNzUyNWEzODdkM2YwIiwiaXNzIjoiaHR0cHM6Ly9lcmljLXNlYy1hY2Nlc3MtbWdtdC1odHRwOjg0NDMvYXV0aC9yZWFsbXMvZHhwIiwic3ViIjoiMGFlNjZhZWUtMGE3ZS00M2ExLTljMmUtOTI4YWFjYTUzMDAzIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYWRtaW4tY2xpIiwic2Vzc2lvbl9zdGF0ZSI6IjA3N2Q3NmNiLTNlODEtNGYzMC04ZWYzLTY1MTcxOWJhYzg5MSIsImFjciI6IjEiLCJzY29wZSI6IiIsImlhbV9yb2xlcyI6WyJjYW11bmRhIiwiQ1NSLWxldmVsMSIsIkVDTV9Vc2VyUHJvZmlsZUFkbWluaXN0cmF0b3JzIiwiRU9DX0pYQ19BRE1JTiIsIkVPQ19QQ19BRE1JTiIsIkVPQ19Vc2VyUHJvZmlsZUFkbWluaXN0cmF0b3JzIiwiSlhDX0FETUlOIiwiSlhDX0FkbWluaXN0cmF0b3IiLCJQTVVJIiwiVXNlciBQcm9maWxlIEFkbWluaXN0cmF0b3JzIl0sInByZWZlcnJlZF91c2VybmFtZSI6ImFkbWluIn0.E568pWUotsOq-Q5Q7kyJNtvZBKEtsIOsvHtdh-4xEVg0QimvRmOAsdQ0YZXFVwfGs7rmqRY0N5NjZDamZH_Np67noyRL5RVyiBvYqnQCNRgLFrU3czowhfC0mXIDpbg0M37FgNNqke3w6tjuamVf_taGb4HSFQvRygfuKI9Vxy4gKqG8ySQqXrIsEKduaPVBNgbdV2_rTav65HJnNLG718RBsgoElr2KnYAqmYyOtF7nR0jxdpq2EObUjuaPtj8A8Jtg46FBgtODmg2L0P76peUyxrcaoUQbrodnQQ7tQjbJHYynNDmpxvm80urn38ue_jbkQvvcpZDlTDsaczZqiQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cpq_server" elementType="Argument">
            <stringProp name="Argument.name">cpq_server</stringProp>
            <stringProp name="Argument.value">${__P(cpq_server,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cpq_port" elementType="Argument">
            <stringProp name="Argument.name">cpq_port</stringProp>
            <stringProp name="Argument.value">${__P(cpq_port,30000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cpq_protocol" elementType="Argument">
            <stringProp name="Argument.name">cpq_protocol</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalThread" elementType="Argument">
            <stringProp name="Argument.name">totalThread</stringProp>
            <stringProp name="Argument.value">${__P(totalThreads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of thread(s) used for run</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">${__P(loopCount,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PO1CHARA" elementType="Argument">
            <stringProp name="Argument.name">PO1CHARA</stringProp>
            <stringProp name="Argument.value">${__P(po1chara,  )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">PO_MVP_PRE_MSISDN_STD</stringProp>
          </elementProp>
          <elementProp name="PO3CHARA" elementType="Argument">
            <stringProp name="Argument.name">PO3CHARA</stringProp>
            <stringProp name="Argument.value">${__P(po3chara,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PO5CHARA" elementType="Argument">
            <stringProp name="Argument.name">PO5CHARA</stringProp>
            <stringProp name="Argument.value">${__P(po5chara, )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">PO_MVP_PRE_SIM_CARD</stringProp>
          </elementProp>
          <elementProp name="BPO" elementType="Argument">
            <stringProp name="Argument.name">BPO</stringProp>
            <stringProp name="Argument.value">${__P(bpo,BPO_4Cart_1Char_KPI)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">BPO_MVP_PRE_AC_STD_10</stringProp>
          </elementProp>
          <elementProp name="quantity" elementType="Argument">
            <stringProp name="Argument.name">quantity</stringProp>
            <stringProp name="Argument.value">${__P(quantity,4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="poCount" elementType="Argument">
            <stringProp name="Argument.name">poCount</stringProp>
            <stringProp name="Argument.value">${__P(npos,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of POs</stringProp>
          </elementProp>
          <elementProp name="server_eoc" elementType="Argument">
            <stringProp name="Argument.name">server_eoc</stringProp>
            <stringProp name="Argument.value">${__P(server,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,30000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minio_url" elementType="Argument">
            <stringProp name="Argument.name">minio_url</stringProp>
            <stringProp name="Argument.value">${__P(minio_url,10.61.37.208)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accesskey" elementType="Argument">
            <stringProp name="Argument.name">accesskey</stringProp>
            <stringProp name="Argument.value">${__P(accesskey,TESTPKEY)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secretkey" elementType="Argument">
            <stringProp name="Argument.name">secretkey</stringProp>
            <stringProp name="Argument.value">${__P(secretkey,TESTPKEY)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="obj_stor_pod_name" elementType="Argument">
            <stringProp name="Argument.name">obj_stor_pod_name</stringProp>
            <stringProp name="Argument.value">${__P(obj_stor_pod_name,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">${logFile}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Set Test Start Time" enabled="true">
        <stringProp name="TestPlan.comments">This Fragment must execute once</stringProp>
      </TestFragmentController>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set StartTime" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.put(&quot;JmeterTestStartTime&quot;,&quot;&quot;+${__time()})</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Quantity_Based_SC" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${totalThread}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">vars.put(&quot;customerId&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;uploadid&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));

vars.put(&quot;orderId&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;placeref&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller - Get Token" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get CWToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server_eoc}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/eoc/avmSecurity/getToken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic dXBhZG1pbjp1cGFkbWlu</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CWToken Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">po1chara = vars.get(&quot;PO1CHARA&quot;);
po3chara = vars.get(&quot;PO3CHARA&quot;);
po5chara = vars.get(&quot;PO5CHARA&quot;);
bpo = vars.get(&quot;BPO&quot;);


if (po1chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po1chara);
else if (po3chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po3chara);
else if (po5chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po5chara);
else
  props.put(&quot;PONAME&quot;, bpo);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Discovery get product" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">pob/discovery/v1/productOffering/${PO1}?expand=characteristic</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Create Shopping Cart with Cart Items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">scId;humanReadableId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id;$.humanReadableId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_empty_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;requestedCompletionDate&quot;: &quot;2022-12-31T11:37:18.318Z&quot;,&#xd;
    &quot;owner&quot;: &quot;${customerId}&quot;,&#xd;
    &quot;relatedParty&quot;: [&#xd;
        {&#xd;
            &quot;role&quot;: &quot;customer&quot;,&#xd;
            &quot;id&quot;: &quot;${customerId}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;contextSpecification&quot;: {&#xd;
        &quot;id&quot;: &quot;resiCatalogContext&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Create Shopping Cart with Cart Items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">scId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PO1CHARA" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&apos;PO1CHARA&apos;).length() &gt; 1 )}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_1chara" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${PO1CHARA}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Proxy-Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PO3CHARA" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&apos;PO3CHARA&apos;).length() &gt; 1 )}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_3chara" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${PO3CHARA}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Proxy-Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PO5CHARA" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&apos;PO5CHARA&apos;).length() &gt; 0)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_5chara" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${PO5CHARA}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Proxy-Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If BPO" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&apos;BPO&apos;).length() &gt; 0)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_BPO" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${BPO}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Proxy-Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_ext_related_data" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/1/relatedParty&quot;,&#xd;
        &quot;value&quot;: [&#xd;
            {&#xd;
                &quot;role&quot;: &quot;User&quot;,&#xd;
                &quot;externalData&quot;: {&#xd;
                    &quot;isExternal&quot;: true&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/1/relatedEntity&quot;,&#xd;
        &quot;value&quot;: [&#xd;
            {&#xd;
                &quot;role&quot;: &quot;Attachment&quot;,&#xd;
                &quot;externalData&quot;: {&#xd;
                    &quot;isExternal&quot;: true&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/1/product/place&quot;,&#xd;
        &quot;value&quot;: [&#xd;
            {&#xd;
                &quot;role&quot;: &quot;BillingAccount&quot;,&#xd;
                &quot;externalData&quot;: {&#xd;
                    &quot;isExternal&quot;: true&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
            <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}?price=true</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json-patch+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Proxy-Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${BPO}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: 2&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">bpoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"></stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update_characteristic" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/0/product/productCharacteristic/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;name&quot;: &quot;SERVICE_DESCRIPTION&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}?price=true</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">scId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_opt_child_to_sc" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;PO_DD2&quot;&#xd;
            },&#xd;
            &quot;relatedEntity&quot;: [&#xd;
                {&#xd;
                    &quot;role&quot;: &quot;Product&quot;,&#xd;
                    &quot;id&quot;: &quot;${bpoId}&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: 10&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}?price=true</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Add Cart Item - Optional PO Patch</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">scId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput 

def jsonSlurper = new JsonSlurper()
def payload = &apos;{&quot;op&quot;:&quot;add&quot;,&quot;path&quot;:&quot;/cartItem/-&quot;,&quot;value&quot;:{&quot;action&quot;:&quot;ADD&quot;,&quot;relatedParty&quot;:[{&quot;role&quot;:&quot;Customer&quot;,&quot;id&quot;:&quot;updatecustomer&quot;}],&quot;productOffering&quot;:{&quot;id&quot;:&quot;poname&quot;},&quot;relatedEntity&quot;:[]}}&apos;

def cartItem = jsonSlurper.parseText(payload)
int poCount = Integer.parseInt(vars.get(&quot;poCount&quot;))
def cartItems = []
int threadno = ctx.getThreadNum()+1

cartItem.value.relatedParty[0].id=&quot;CUST-&quot;+vars.get(&quot;totalThread&quot;)+&quot;-&quot;+threadno+&quot;-&quot;+vars.get(&quot;prefix&quot;)+&quot;-&quot;+vars.get(&quot;CUSTOMER_ID&quot;)
cartItem.value.productOffering.id=vars.get(&quot;devicePO&quot;)
cartItems.add(cartItem)
cartItem = null

for (int i = 0;i&lt;poCount;i++) {
	cartItem = jsonSlurper.parseText(payload)
	cartItem.value.relatedParty[0].id=&quot;CUST-&quot;+vars.get(&quot;totalThread&quot;)+&quot;-&quot;+ctx.getThreadNum()+&quot;-&quot;+vars.get(&quot;prefix&quot;)+&quot;-&quot;+vars.get(&quot;CUSTOMER_ID&quot;)
	cartItem.value.productOffering.id=vars.get(&quot;optionalPO1&quot;)
	cartItems.add(cartItem)
	cartItem = null
}

vars.put(&quot;cartItems&quot;,JsonOutput.prettyPrint(JsonOutput.toJson(cartItems)))</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download_Template" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/downloadTemplate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Range</stringProp>
                <stringProp name="Header.value">items=0-50</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">download_file</stringProp>
            <stringProp name="RegexExtractor.regex">(?s)(^.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">${scId}_org.xls</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <boolProp name="FileSaver.skipsuffix">true</boolProp>
            <boolProp name="FileSaver.skipautonumber">true</boolProp>
          </ResultSaver>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import jxl.*;
import jxl.write.*;


def scId = vars.get(&quot;scId&quot;)
def filename_org = &quot;/opt/download/apache-jmeter-5.4.1/bin/&quot;+scId +&quot;_org.xls&quot;
int quantity = Integer.parseInt(vars.get(&quot;quantity&quot;))
Workbook workbook1 = Workbook.getWorkbook(new File(filename_org))
WritableWorkbook aCopy = Workbook.createWorkbook(new File(scId+&quot;.xls&quot;),workbook1);
int number_of_sheets = workbook1.getSheets().length
log.debug &quot;Total Number of Sheets: &quot;+number_of_sheets

int no_of_chara = 0
for (int n=0; n &lt; number_of_sheets; n++){
	Sheet sheet1 = workbook1.getSheet(n)
	WritableSheet aCopySheet = aCopy.getSheet(n);
	log.debug &quot;Sheet Name: &quot;+sheet1.getName()
	log.debug &quot;Total Number of coloumns: &quot;+sheet1.getColumns()
	no_of_chara = sheet1.getColumns() - 1
     if(sheet1.getName().contains(vars.get(&quot;PO1CHARA&quot;))){
		// PO_MVP_PRE_MSISDN_STD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO5CHARA&quot;))){
		// PO_MVP_PRE_SIM_CARD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO3CHARA&quot;))){
		// Need to build PO with 3 chara
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(&quot;MobileTechnicalCont&quot;)){
		//Use any PO doesn&apos;t have quantity aware chara, adding external related data into technical contract
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
}

workbook1.close()
aCopy.write(); 
aCopy.close();

new File(filename_org).delete()

def update_excel_file(int quantity, WritableSheet aCopySheet, int no_of_chara)
{  
    int start_column = 1
	int start_row = 10
	int new_column = 0
	int new_row = 0
	String cellValue = &quot;&quot;;
	Random random = new Random(); 
	log.debug &quot;No: of characters&quot;+no_of_chara
	for(int i=0;i &lt; quantity;i++){
		 new_row = i + start_row
		 for(int j=0;j &lt; no_of_chara; j++){
			  new_column = j + start_column
			  log.debug &quot;Updating coloumn, row: &quot;+new_column+&quot;,&quot;+new_row
			  if (aCopySheet.getCell(new_column,8).getContents() == &quot;pin&quot;)
				cellValue = &quot;&quot;+random.nextInt(9999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;puk&quot;)
				cellValue = &quot;&quot;+random.nextInt(99999999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;imsi&quot;)
				cellValue = &quot;&quot;+(long) (1000000000L + random.nextFloat() * 9000000000L);
			  /*else if (aCopySheet.getCell(new_column,8).getContents() == &quot;sku&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;serialNumber&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedParty&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedEntity&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;place&quot;)
				cellValue = cellValue;*/
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;resourceNumber&quot;)
				cellValue = &quot;&quot;+(long) (800000000000L + random.nextFloat() * 890000000000L);
			  else
				cellValue = &quot;&quot;+(long) (10000000000L + random.nextFloat() * 90000000000L);;
			  
			  Label label1 = new Label(new_column, new_row, cellValue);
			  aCopySheet.addCell(label1)
			 
		}
		new_column = 0
		new_row = 0
	}
}

</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import jxl.*;
import jxl.write.*;


def scId = vars.get(&quot;scId&quot;)
def filename_org = scId +&quot;_org.xls&quot;
int quantity = Integer.parseInt(vars.get(&quot;quantity&quot;))
Workbook workbook1 = Workbook.getWorkbook(new File(filename_org))
WritableWorkbook aCopy = Workbook.createWorkbook(new File(scId+&quot;.xls&quot;),workbook1);
int number_of_sheets = workbook1.getSheets().length
log.debug &quot;Total Number of Sheets: &quot;+number_of_sheets

int no_of_chara = 0
for (int n=0; n &lt; number_of_sheets; n++){
	Sheet sheet1 = workbook1.getSheet(n)
	WritableSheet aCopySheet = aCopy.getSheet(n);
	log.debug &quot;Sheet Name: &quot;+sheet1.getName()
	log.debug &quot;Total Number of coloumns: &quot;+sheet1.getColumns()
	no_of_chara = sheet1.getColumns() - 1
     if(sheet1.getName().contains(vars.get(&quot;PO1CHARA&quot;))){
		// PO_MVP_PRE_MSISDN_STD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO5CHARA&quot;))){
		// PO_MVP_PRE_SIM_CARD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO3CHARA&quot;))){
		// Need to build PO with 3 chara
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(&quot;MobileTechnicalCont&quot;)){
		//Use any PO doesn&apos;t have quantity aware chara, adding external related data into technical contract
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
}

workbook1.close()
aCopy.write(); 
aCopy.close();

new File(filename_org).delete()

def update_excel_file(int quantity, WritableSheet aCopySheet, int no_of_chara)
{  
    int start_column = 1
	int start_row = 10
	int new_column = 0
	int new_row = 0
	String cellValue = &quot;&quot;;
	Random random = new Random(); 
	log.debug &quot;No: of characters&quot;+no_of_chara
	for(int i=0;i &lt; quantity;i++){
		 new_row = i + start_row
		 for(int j=0;j &lt; no_of_chara; j++){
			  new_column = j + start_column
			  log.debug &quot;Updating coloumn, row: &quot;+new_column+&quot;,&quot;+new_row
			  if (aCopySheet.getCell(new_column,8).getContents() == &quot;pin&quot;)
				cellValue = &quot;&quot;+random.nextInt(9999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;puk&quot;)
				cellValue = &quot;&quot;+random.nextInt(99999999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;imsi&quot;)
				cellValue = &quot;&quot;+(long) (1000000000L + random.nextFloat() * 9000000000L);
			  /*else if (aCopySheet.getCell(new_column,8).getContents() == &quot;sku&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;serialNumber&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedParty&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedEntity&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;place&quot;)
				cellValue = cellValue;*/
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;resourceNumber&quot;)
				cellValue = &quot;&quot;+(long) (800000000000L + random.nextFloat() * 890000000000L);
			  else
				cellValue = &quot;&quot;+(long) (10000000000L + random.nextFloat() * 90000000000L);;
			  
			  Label label1 = new Label(new_column, new_row, cellValue);
			  aCopySheet.addCell(label1)
			 
		}
		new_column = 0
		new_row = 0
	}
}

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Upload_Template_to_object_storage" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="upload_template" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import io.minio.BucketExistsArgs;
import io.minio.MakeBucketArgs;
import io.minio.MinioClient;
import io.minio.UploadObjectArgs;
import io.minio.errors.MinioException;
  
String accessKey = vars.get(&quot;accesskey&quot;);
String secretKey = vars.get(&quot;secretkey&quot;);
def scId = vars.get(&quot;scId&quot;)
 
MinioClient minioClient = MinioClient.builder().endpoint(&quot;https://vmx-cpm-405.ete.ka.sw.ericsson.se:30000&quot;)
                    .credentials(accessKey, secretKey)
                    .build();

minioClient.ignoreCertCheck();

boolean isExist = minioClient.bucketExists(BucketExistsArgs.builder().bucket(&quot;quantity-personalization-file&quot;).build());
if (isExist) {
log.info(&quot;Bucket:quantity-personalization-file already exists.&quot;);
}
else {
minioClient.makeBucket(MakeBucketArgs.builder().bucket(&quot;quantity-personalization-file&quot;).build());
}
//minioClient.listBuckets().forEach(b -&gt; log.info(b.name()));

minioClient.uploadObject(UploadObjectArgs.builder()
                         .bucket(&quot;quantity-personalization-file&quot;)
                         .object(scId+&apos;.xls&apos;)
                         .filename(scId+&apos;.xls&apos;)
                         .build());

log.info(scId+&quot;.xls is uploaded to bucket:quantity-personalization-file successfully&quot;);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Obj_Storage_Url" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	bucket: &quot;quantity-personalization-file&quot;&#xd;
	method: &quot;PUT&quot;&#xd;
	object: &quot;QUOTE${scId}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/getObjectStorageUrl/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract upload url" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">upload_url</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">upload_url</stringProp>
            <stringProp name="RegexExtractor.regex">^.*([a-zA-Z]+(-[a-zA-Z]+)+)/([a-zA-Z]+([0-9]+[a-zA-Z]+)+)([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?-([a-zA-Z]+(([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?[a-zA-Z]+)+)-([a-zA-Z]+(([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?[a-zA-Z]+)+)([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?\?X-Amz-[a-zA-Z]+=[a-zA-Z][a-zA-Z][a-zA-Z]\d-[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]-[a-zA-Z][a-zA-Z][a-zA-Z][0-9]+&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=[a-zA-Z]+%[0-9A-Fa-f][0-9A-Fa-f][0-9]+%[0-9A-Fa-f][0-9A-Fa-f][a-zA-Z][a-zA-Z]-e[a-zA-Z][a-zA-Z][a-zA-Z]([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?%[0-9A-Fa-f][0-9A-Fa-f][a-zA-Z]\d%([0-9]+([a-zA-Z]+[0-9]+)+)*.[a-zA-Z]+&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=([0-9]+([a-zA-Z]+[0-9]+)+)[a-zA-Z]&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=[0-9]+&amp;X-[a-zA-Z]+-[a-zA-Z]+=[a-zA-Z]+&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=([a-zA-Z]+([0-9]+[a-zA-Z]+)+)&quot;*.*$</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send File with CPQ" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/minio/quantity-personalization-file/${upload_url}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Range</stringProp>
                <stringProp name="Header.value">items=0-50</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">${scId}.xls</stringProp>
            <stringProp name="RegexExtractor.regex">(?s)(^.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Update Excel" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">ls</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
        </SystemSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import jxl.*;
import jxl.write.*;


def scId = vars.get(&quot;scId&quot;)
def filename_org = scId +&quot;_org.xls&quot;
int quantity = Integer.parseInt(vars.get(&quot;quantity&quot;))
Workbook workbook1 = Workbook.getWorkbook(new File(filename_org))
WritableWorkbook aCopy = Workbook.createWorkbook(new File(scId+&quot;.xls&quot;),workbook1);
int number_of_sheets = workbook1.getSheets().length
log.debug &quot;Total Number of Sheets: &quot;+number_of_sheets

int no_of_chara = 0
for (int n=0; n &lt; number_of_sheets; n++){
	Sheet sheet1 = workbook1.getSheet(n)
	WritableSheet aCopySheet = aCopy.getSheet(n);
	log.debug &quot;Sheet Name: &quot;+sheet1.getName()
	log.debug &quot;Total Number of coloumns: &quot;+sheet1.getColumns()
	no_of_chara = sheet1.getColumns() - 1
     if(sheet1.getName().contains(vars.get(&quot;PO1CHARA&quot;))){
		// PO_MVP_PRE_MSISDN_STD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO5CHARA&quot;))){
		// PO_MVP_PRE_SIM_CARD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO3CHARA&quot;))){
		// Need to build PO with 3 chara
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(&quot;MobileTechnicalCont&quot;)){
		//Use any PO doesn&apos;t have quantity aware chara, adding external related data into technical contract
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
}

workbook1.close()
aCopy.write(); 
aCopy.close();

//new File(filename_org).delete()

def update_excel_file(int quantity, WritableSheet aCopySheet, int no_of_chara)
{  
    int start_column = 1
	int start_row = 10
	int new_column = 0
	int new_row = 0
	String cellValue = &quot;&quot;;
	Random random = new Random(); 
	log.debug &quot;No: of characters&quot;+no_of_chara
	for(int i=0;i &lt; quantity;i++){
		 new_row = i + start_row
		 for(int j=0;j &lt; no_of_chara; j++){
			  new_column = j + start_column
			  log.debug &quot;Updating coloumn, row: &quot;+new_column+&quot;,&quot;+new_row
			  if (aCopySheet.getCell(new_column,8).getContents() == &quot;pin&quot;)
				cellValue = &quot;&quot;+random.nextInt(9999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;puk&quot;)
				cellValue = &quot;&quot;+random.nextInt(99999999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;imsi&quot;)
				cellValue = &quot;&quot;+(long) (1000000000L + random.nextFloat() * 9000000000L);
			  /*else if (aCopySheet.getCell(new_column,8).getContents() == &quot;sku&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;serialNumber&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedParty&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedEntity&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;place&quot;)
				cellValue = cellValue;*/
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;resourceNumber&quot;)
				cellValue = &quot;&quot;+(long) (800000000000L + random.nextFloat() * 890000000000L);
			  else
				cellValue = &quot;&quot;+(long) (10000000000L + random.nextFloat() * 90000000000L);;
			  
			  Label label1 = new Label(new_column, new_row, cellValue);
			  aCopySheet.addCell(label1)
			 
		}
		new_column = 0
		new_row = 0
	}
}

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Copy file to pod" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">Process p = Runtime.getRuntime().exec(&quot;kubectl cp /coc-lsv-kpi-regression/jmeter_files/${scId}.xls ${obj_stor_pod_name}:/tmp/ -n edbtest&quot;);
p.waitFor();

log.info(&quot;Copy complete.&quot;);

// Read the output of the command and log it
BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
StringBuilder logCommandOutput = new StringBuilder();
String line;
while( (line = in.readLine()) != null) {
  logCommandOutput.append(line);
}
in.close();
log.info(&quot;Output: &quot; + logCommandOutput.toString());</stringProp>
          <stringProp name="TestPlan.comments">Copy updated excel to eric-data-object-storage-mn-mgt pod</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="upload file with cli" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">Process p = Runtime.getRuntime().exec(&quot;kubectl exec -it ${obj_stor_pod_name} -n edbtest -- eosc push server eric-data-object-storage-mn user TESTPKEY passwd TESTPKEY local /tmp/${scId}.xls remote quantity-personalization-file&quot;);
p.waitFor();

log.info(&quot;Execution complete.&quot;);

// Read the output of the  command and log it
BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
StringBuilder logCommandOutput = new StringBuilder();
String line;
while( (line = in.readLine()) != null) {
  logCommandOutput.append(line);
}
in.close();
log.info(&quot;Output: &quot; + logCommandOutput.toString());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Attach_File" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/attachFile</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Detach_File" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/detachFile</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate_SC" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/validate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Price SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10_Present_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;state&quot;: &quot;present&quot;,&#xd;
  &quot;note&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: 23,&#xd;
      &quot;author&quot;: &quot;upadmin&quot;,&#xd;
      &quot;text&quot;: &quot;presented&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/setState</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Present SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T11_Accept_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;state&quot;: &quot;accept&quot;,&#xd;
  &quot;note&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: 23,&#xd;
      &quot;author&quot;: &quot;upadmin&quot;,&#xd;
      &quot;text&quot;: &quot;accepted&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/setState</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Accept SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T16_Submit_SC" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/submit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Submit SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;/opt/erinksh/result/orderIds&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;${orderId}&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extractOrderID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Non-Quantity_Based_SC" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">200</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">vars.put(&quot;customerId&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;uploadid&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;Counter&quot;, &apos;1&apos;);
vars.put(&quot;orderId&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;placeref&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller - Get Token" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get CWToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server_eoc}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/eoc/avmSecurity/getToken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic dXBhZG1pbjp1cGFkbWlu</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CWToken Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">po1chara = vars.get(&quot;PO1CHARA&quot;);
po3chara = vars.get(&quot;PO3CHARA&quot;);
po5chara = vars.get(&quot;PO5CHARA&quot;);
bpo = vars.get(&quot;BPO&quot;);


if (po1chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po1chara);
else if (po3chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po3chara);
else if (po5chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po5chara);
else
  props.put(&quot;PONAME&quot;, bpo);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Discovery get product" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">pob/discovery/v1/productOffering/${PO1}?expand=characteristic</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Create Shopping Cart with Cart Items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">scId;humanReadableId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id;$.humanReadableId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_empty_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;owner&quot;: &quot;${customerId}&quot;,&#xd;
    &quot;relatedParty&quot;: [&#xd;
        {&#xd;
            &quot;role&quot;: &quot;customer&quot;,&#xd;
            &quot;id&quot;: &quot;${customerId}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;relatedPlace&quot;: [&#xd;
        {&#xd;
            &quot;role&quot;: &quot;serviceLocation&quot;,&#xd;
            &quot;id&quot;: &quot;4698121&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;description&quot;: &quot;Moe&apos;s shopping cart&quot;,&#xd;
    &quot;requestedCompletionDate&quot;:&quot;2029-11-30T01:02:34.504Z&quot;,&#xd;
    &quot;contextCharacteristic&quot;: [&#xd;
        {&#xd;
            &quot;value&quot;: &quot;SMB&quot;,&#xd;
            &quot;name&quot;: &quot;customersubtype&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;value&quot;: &quot;5&quot;,&#xd;
            &quot;name&quot;: &quot;revenuerange&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;value&quot;: &quot;ON&quot;,&#xd;
            &quot;name&quot;: &quot;statecode&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;saleschannel&quot;,&#xd;
            &quot;value&quot;: &quot;CSR&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;contextSpecification&quot;: {&#xd;
        &quot;id&quot;: &quot;resiCatalogContext&quot;&#xd;
    },&#xd;
    &quot;attrs&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;mainContact&quot;,&#xd;
            &quot;value&quot;: &quot;4831804&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;serviceLocation&quot;,&#xd;
            &quot;value&quot;: &quot;4698121&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;note&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: 25,&#xd;
            &quot;author&quot;: &quot;Moe&quot;,&#xd;
            &quot;text&quot;: &quot;this is a new shopping cart&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Create Shopping Cart with Cart Items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">scId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">20000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Patch PO - While quanity" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript((${Counter} &lt;= 1),)}</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PO1CHARA" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&apos;PO1CHARA&apos;).length() &gt; 11 )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_1chara -${Counter}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${PO1CHARA}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json-patch+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Proxy-Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PO3CHARA" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&apos;PO3CHARA&apos;).length() &gt; 1 )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_3chara -${Counter}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${PO3CHARA}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json-patch+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Proxy-Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If PO5CHARA" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&apos;PO5CHARA&apos;).length() &gt; 1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_5chara -${Counter}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${PO5CHARA}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json-patch+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Proxy-Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If BPO" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&apos;BPO&apos;).length() &gt; 1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart_BPO -${Counter}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${BPO}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: &quot;${quantity}&quot;&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json-patch+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Proxy-Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">po1charaItemId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_ext_related_data" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/1/relatedParty&quot;,&#xd;
        &quot;value&quot;: [&#xd;
            {&#xd;
                &quot;role&quot;: &quot;User&quot;,&#xd;
                &quot;externalData&quot;: {&#xd;
                    &quot;isExternal&quot;: true&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/1/relatedEntity&quot;,&#xd;
        &quot;value&quot;: [&#xd;
            {&#xd;
                &quot;role&quot;: &quot;Attachment&quot;,&#xd;
                &quot;externalData&quot;: {&#xd;
                    &quot;isExternal&quot;: true&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/1/product/place&quot;,&#xd;
        &quot;value&quot;: [&#xd;
            {&#xd;
                &quot;role&quot;: &quot;BillingAccount&quot;,&#xd;
                &quot;externalData&quot;: {&#xd;
                    &quot;isExternal&quot;: true&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
              <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}?price=true</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json-patch+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Proxy-Connection</stringProp>
                    <stringProp name="Header.value">keep-alive</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_PO_to_cart" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;${BPO}&quot;&#xd;
            },&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: 2&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">cpq/shoppingCart/v1/shoppingCart/${scId}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">bpoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">cartItem[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"></stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update_characteristic" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/0/product/productCharacteristic/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;name&quot;: &quot;SERVICE_DESCRIPTION&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}?price=true</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">scId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add_opt_child_to_sc" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;op&quot;: &quot;add&quot;,&#xd;
        &quot;path&quot;: &quot;/cartItem/-&quot;,&#xd;
        &quot;value&quot;: {&#xd;
            &quot;action&quot;: &quot;ADD&quot;,&#xd;
            &quot;productOffering&quot;: {&#xd;
                &quot;id&quot;: &quot;PO_DD2&quot;&#xd;
            },&#xd;
            &quot;relatedEntity&quot;: [&#xd;
                {&#xd;
                    &quot;role&quot;: &quot;Product&quot;,&#xd;
                    &quot;id&quot;: &quot;${bpoId}&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;quantity&quot;: {&#xd;
                &quot;amount&quot;: 10&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}?price=true</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Add Cart Item - Optional PO Patch</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">scId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput 

def jsonSlurper = new JsonSlurper()
def payload = &apos;{&quot;op&quot;:&quot;add&quot;,&quot;path&quot;:&quot;/cartItem/-&quot;,&quot;value&quot;:{&quot;action&quot;:&quot;ADD&quot;,&quot;relatedParty&quot;:[{&quot;role&quot;:&quot;Customer&quot;,&quot;id&quot;:&quot;updatecustomer&quot;}],&quot;productOffering&quot;:{&quot;id&quot;:&quot;poname&quot;},&quot;relatedEntity&quot;:[]}}&apos;

def cartItem = jsonSlurper.parseText(payload)
int poCount = Integer.parseInt(vars.get(&quot;poCount&quot;))
def cartItems = []
int threadno = ctx.getThreadNum()+1

cartItem.value.relatedParty[0].id=&quot;CUST-&quot;+vars.get(&quot;totalThread&quot;)+&quot;-&quot;+threadno+&quot;-&quot;+vars.get(&quot;prefix&quot;)+&quot;-&quot;+vars.get(&quot;CUSTOMER_ID&quot;)
cartItem.value.productOffering.id=vars.get(&quot;devicePO&quot;)
cartItems.add(cartItem)
cartItem = null

for (int i = 0;i&lt;poCount;i++) {
	cartItem = jsonSlurper.parseText(payload)
	cartItem.value.relatedParty[0].id=&quot;CUST-&quot;+vars.get(&quot;totalThread&quot;)+&quot;-&quot;+ctx.getThreadNum()+&quot;-&quot;+vars.get(&quot;prefix&quot;)+&quot;-&quot;+vars.get(&quot;CUSTOMER_ID&quot;)
	cartItem.value.productOffering.id=vars.get(&quot;optionalPO1&quot;)
	cartItems.add(cartItem)
	cartItem = null
}

vars.put(&quot;cartItems&quot;,JsonOutput.prettyPrint(JsonOutput.toJson(cartItems)))</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="false"/>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import jxl.*;
import jxl.write.*;


def scId = vars.get(&quot;scId&quot;)
def filename_org = scId +&quot;_org.xls&quot;
int quantity = Integer.parseInt(vars.get(&quot;quantity&quot;))
Workbook workbook1 = Workbook.getWorkbook(new File(filename_org))
WritableWorkbook aCopy = Workbook.createWorkbook(new File(scId+&quot;.xls&quot;),workbook1);
int number_of_sheets = workbook1.getSheets().length
log.debug &quot;Total Number of Sheets: &quot;+number_of_sheets

int no_of_chara = 0
for (int n=0; n &lt; number_of_sheets; n++){
	Sheet sheet1 = workbook1.getSheet(n)
	WritableSheet aCopySheet = aCopy.getSheet(n);
	log.debug &quot;Sheet Name: &quot;+sheet1.getName()
	log.debug &quot;Total Number of coloumns: &quot;+sheet1.getColumns()
	no_of_chara = sheet1.getColumns() - 1
     if(sheet1.getName().contains(vars.get(&quot;PO1CHARA&quot;))){
		// PO_MVP_PRE_MSISDN_STD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO5CHARA&quot;))){
		// PO_MVP_PRE_SIM_CARD
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(vars.get(&quot;PO3CHARA&quot;))){
		// Need to build PO with 3 chara
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
	if(sheet1.getName().contains(&quot;MobileTechnicalCont&quot;)){
		//Use any PO doesn&apos;t have quantity aware chara, adding external related data into technical contract
		update_excel_file(quantity,aCopySheet,no_of_chara)
	}
}

workbook1.close()
aCopy.write(); 
aCopy.close();

new File(filename_org).delete()

def update_excel_file(int quantity, WritableSheet aCopySheet, int no_of_chara)
{  
    int start_column = 1
	int start_row = 10
	int new_column = 0
	int new_row = 0
	String cellValue = &quot;&quot;;
	Random random = new Random(); 
	log.debug &quot;No: of characters&quot;+no_of_chara
	for(int i=0;i &lt; quantity;i++){
		 new_row = i + start_row
		 for(int j=0;j &lt; no_of_chara; j++){
			  new_column = j + start_column
			  log.debug &quot;Updating coloumn, row: &quot;+new_column+&quot;,&quot;+new_row
			  if (aCopySheet.getCell(new_column,8).getContents() == &quot;pin&quot;)
				cellValue = &quot;&quot;+random.nextInt(9999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;puk&quot;)
				cellValue = &quot;&quot;+random.nextInt(99999999);
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;imsi&quot;)
				cellValue = &quot;&quot;+(long) (1000000000L + random.nextFloat() * 9000000000L);
			  /*else if (aCopySheet.getCell(new_column,8).getContents() == &quot;sku&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;serialNumber&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedParty&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;RelatedEntity&quot;)
				cellValue = cellValue;
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;place&quot;)
				cellValue = cellValue;*/
			  else if (aCopySheet.getCell(new_column,8).getContents() == &quot;resourceNumber&quot;)
				cellValue = &quot;&quot;+(long) (800000000000L + random.nextFloat() * 890000000000L);
			  else
				cellValue = &quot;&quot;+(long) (10000000000L + random.nextFloat() * 90000000000L);;
			  
			  Label label1 = new Label(new_column, new_row, cellValue);
			  aCopySheet.addCell(label1)
			 
		}
		new_column = 0
		new_row = 0
	}
}

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Upload_Template_to_object_storage" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="upload_template" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import io.minio.BucketExistsArgs;
import io.minio.MakeBucketArgs;
import io.minio.MinioClient;
import io.minio.UploadObjectArgs;
import io.minio.errors.MinioException;
  
String accessKey = vars.get(&quot;accesskey&quot;);
String secretKey = vars.get(&quot;secretkey&quot;);
def scId = vars.get(&quot;scId&quot;)
 
MinioClient minioClient = MinioClient.builder().endpoint(&quot;https://vmx-cpm-405.ete.ka.sw.ericsson.se:30000&quot;)
                    .credentials(accessKey, secretKey)
                    .build();

minioClient.ignoreCertCheck();

boolean isExist = minioClient.bucketExists(BucketExistsArgs.builder().bucket(&quot;quantity-personalization-file&quot;).build());
if (isExist) {
log.info(&quot;Bucket:quantity-personalization-file already exists.&quot;);
}
else {
minioClient.makeBucket(MakeBucketArgs.builder().bucket(&quot;quantity-personalization-file&quot;).build());
}
//minioClient.listBuckets().forEach(b -&gt; log.info(b.name()));

minioClient.uploadObject(UploadObjectArgs.builder()
                         .bucket(&quot;quantity-personalization-file&quot;)
                         .object(scId+&apos;.xls&apos;)
                         .filename(scId+&apos;.xls&apos;)
                         .build());

log.info(scId+&quot;.xls is uploaded to bucket:quantity-personalization-file successfully&quot;);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Obj_Storage_Url" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	bucket: &quot;quantity-personalization-file&quot;&#xd;
	method: &quot;PUT&quot;&#xd;
	object: &quot;QUOTE${scId}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/getObjectStorageUrl/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract upload url" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">upload_url</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">upload_url</stringProp>
            <stringProp name="RegexExtractor.regex">^.*([a-zA-Z]+(-[a-zA-Z]+)+)/([a-zA-Z]+([0-9]+[a-zA-Z]+)+)([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?-([a-zA-Z]+(([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?[a-zA-Z]+)+)-([a-zA-Z]+(([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?[a-zA-Z]+)+)([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?\?X-Amz-[a-zA-Z]+=[a-zA-Z][a-zA-Z][a-zA-Z]\d-[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]-[a-zA-Z][a-zA-Z][a-zA-Z][0-9]+&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=[a-zA-Z]+%[0-9A-Fa-f][0-9A-Fa-f][0-9]+%[0-9A-Fa-f][0-9A-Fa-f][a-zA-Z][a-zA-Z]-e[a-zA-Z][a-zA-Z][a-zA-Z]([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[eE]([+-]?\d+))?%[0-9A-Fa-f][0-9A-Fa-f][a-zA-Z]\d%([0-9]+([a-zA-Z]+[0-9]+)+)*.[a-zA-Z]+&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=([0-9]+([a-zA-Z]+[0-9]+)+)[a-zA-Z]&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=[0-9]+&amp;X-[a-zA-Z]+-[a-zA-Z]+=[a-zA-Z]+&amp;([a-zA-Z]+(-[a-zA-Z]+)+)=([a-zA-Z]+([0-9]+[a-zA-Z]+)+)&quot;*.*$</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send File with CPQ" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/minio/quantity-personalization-file/${upload_url}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Range</stringProp>
                <stringProp name="Header.value">items=0-50</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
            <stringProp name="RandomTimer.range">100.0</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">${scId}.xls</stringProp>
            <stringProp name="RegexExtractor.regex">(?s)(^.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Detach_File" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port">${cpq_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/detachFile</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;personalization&quot;,&#xd;
    &quot;fileId&quot;: &quot;${scId}.xls&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/validate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Price SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10_Present_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;state&quot;: &quot;present&quot;,&#xd;
  &quot;note&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;${scId}&quot;,&#xd;
      &quot;author&quot;: &quot;upadmin&quot;,&#xd;
      &quot;text&quot;: &quot;presented&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/setState</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Present SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T11_Accept_SC" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;state&quot;: &quot;accept&quot;,&#xd;
  &quot;note&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: 23,&#xd;
      &quot;author&quot;: &quot;upadmin&quot;,&#xd;
      &quot;text&quot;: &quot;accepted&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/setState</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Accept SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T16_Submit_SC" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cpq/shoppingCart/v1/shoppingCart/${scId}/submit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Submit SC</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;/opt/erinksh/result/orderIds&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;${orderID}&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extractOrderID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="OM_Order" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">30</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1200</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">vars.put(&quot;customerId&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;uploadid&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));

vars.put(&quot;orderId&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;placeref&quot;,&quot;${__UUID()}&quot;.replace(&quot;-&quot;,&quot;&quot;));
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller - Get Token" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get CWToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server_eoc}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/eoc/avmSecurity/getToken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic dXBhZG1pbjp1cGFkbWlu</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CWToken Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">po1chara = vars.get(&quot;PO1CHARA&quot;);
po3chara = vars.get(&quot;PO3CHARA&quot;);
po5chara = vars.get(&quot;PO5CHARA&quot;);
bpo = vars.get(&quot;BPO&quot;);


if (po1chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po1chara);
else if (po3chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po3chara);
else if (po5chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po5chara);
else
  props.put(&quot;PONAME&quot;, bpo);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_OM_Order" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;createdBy&quot;: &quot;upadmin&quot;,&#xd;
	&quot;requestedCompletionDate&quot;: &quot;2021-12-31T11:37:18.318Z&quot;,&#xd;
	&quot;run&quot;: true,&#xd;
	&quot;relatedParties&quot;: [&#xd;
		{&#xd;
			&quot;role&quot;: &quot;Customer&quot;,&#xd;
			&quot;reference&quot;: &quot;${customerId}&quot;&#xd;
		}&#xd;
	],&#xd;
	&quot;orderItems&quot;: [&#xd;
		{&#xd;
			&quot;item&quot;: {&#xd;
				&quot;id&quot;: &quot;7099629ebd8040a5a9ed7b907a19552c&quot;,&#xd;
				&quot;createdBy&quot;: &quot;upadmin&quot;,&#xd;
				&quot;createdDate&quot;: &quot;2021-12-20T05:32:29.837Z&quot;,&#xd;
				&quot;description&quot;: &quot;SIM Card&quot;,&#xd;
				&quot;orderType&quot;: &quot;ProductOfferingOrder&quot;,&#xd;
				&quot;action&quot;: &quot;Add&quot;,&#xd;
				&quot;relatedEntities&quot;: [&#xd;
					{&#xd;
						&quot;type&quot;: &quot;Contract&quot;,&#xd;
						&quot;reference&quot;: &quot;5b1ed71e-a24c-499f-b351-ed7ffbce6479&quot;,&#xd;
						&quot;entitySpecification&quot;: &quot;PreMobileTechnicalContract&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;fileReference&quot;: &quot;21354-9210-10016999-38384291.xls&quot;,&#xd;
				&quot;cartItemId&quot;: &quot;7099629e-bd80-40a5-a9ed-7b907a19552c&quot;,&#xd;
				&quot;quantity&quot;: {&#xd;
					&quot;amount&quot;: 75&#xd;
				},&#xd;
				&quot;productOffering&quot;: {&#xd;
					&quot;id&quot;: &quot;PO_MVP_PRE_SIM_CARD&quot;&#xd;
				},&#xd;
				&quot;product&quot;: {&#xd;
					&quot;productCharacteristics&quot;: [&#xd;
						{&#xd;
							&quot;name&quot;: &quot;serialNumber&quot;,&#xd;
							&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//serialNumber&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;name&quot;: &quot;pin&quot;,&#xd;
							&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//pin&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;name&quot;: &quot;puk&quot;,&#xd;
							&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//puk&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;name&quot;: &quot;imsi&quot;,&#xd;
							&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//imsi&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;name&quot;: &quot;sku&quot;,&#xd;
							&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//sku&quot;&#xd;
						},&#xd;
						{&#xd;
							&quot;name&quot;: &quot;instance_state&quot;&#xd;
						}&#xd;
					],&#xd;
					&quot;productSpecification&quot;: &quot;PS_MVP_PRE_SIM_CARD&quot;,&#xd;
					&quot;resourceReferences&quot;: [&#xd;
						{&#xd;
							&quot;id&quot;: &quot;c58b7833265247b4bd71bcdec73cb267&quot;&#xd;
						}&#xd;
					],&#xd;
					&quot;action&quot;: &quot;Add&quot;,&#xd;
					&quot;externalId&quot;: &quot;7099629e-bd80-40a5-a9ed-7b907a19552c&quot;&#xd;
				},&#xd;
				&quot;resources&quot;: [&#xd;
					{&#xd;
						&quot;resourceCharacteristics&quot;: [&#xd;
							{&#xd;
								&quot;name&quot;: &quot;simType&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;simTechnology&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;serialNumber&quot;,&#xd;
								&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//serialNumber&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;pin&quot;,&#xd;
								&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//pin&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;vendor&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;puk&quot;,&#xd;
								&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//puk&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;imsi&quot;,&#xd;
								&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//imsi&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;sku&quot;,&#xd;
								&quot;valueReference&quot;: &quot;xls://21354-9210-10016999-38384291.xls/PO_MVP_PRE_SIM_CARD_7099629e//sku&quot;&#xd;
							},&#xd;
							{&#xd;
								&quot;name&quot;: &quot;instance_state&quot;&#xd;
							}&#xd;
						],&#xd;
						&quot;resourceSpecification&quot;: &quot;PRS_MVP_PRE_SIM_CARD&quot;,&#xd;
						&quot;isLogical&quot;: false,&#xd;
						&quot;parentId&quot;: &quot;7099629ebd8040a5a9ed7b907a19552c&quot;,&#xd;
						&quot;resourceType&quot;: &quot;Accessory&quot;,&#xd;
						&quot;action&quot;: &quot;Add&quot;,&#xd;
						&quot;id&quot;: &quot;c58b7833265247b4bd71bcdec73cb267&quot;,&#xd;
						&quot;externalId&quot;: &quot;c58b7833-2652-47b4-bd71-bcdec73cb267&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		},&#xd;
		{&#xd;
			&quot;item&quot;: {&#xd;
				&quot;id&quot;: &quot;5b1ed71ea24c499fb351ed7ffbce6479&quot;,&#xd;
				&quot;createdBy&quot;: &quot;upadmin&quot;,&#xd;
				&quot;createdDate&quot;: &quot;2021-12-20T05:32:29.837Z&quot;,&#xd;
				&quot;description&quot;: &quot;Mobile Technical Contract&quot;,&#xd;
				&quot;orderType&quot;: &quot;CustomerChangeOrder&quot;,&#xd;
				&quot;action&quot;: &quot;Add&quot;,&#xd;
				&quot;relatedEntities&quot;: [&#xd;
					{&#xd;
						&quot;type&quot;: &quot;Contract&quot;,&#xd;
						&quot;name&quot;: &quot;Mobile Technical Contract&quot;,&#xd;
						&quot;reference&quot;: &quot;5b1ed71e-a24c-499f-b351-ed7ffbce6479&quot;,&#xd;
						&quot;entitySpecification&quot;: &quot;PreMobileTechnicalContract&quot;,&#xd;
						&quot;entity&quot;: {&#xd;
							&quot;statuses&quot;: [&#xd;
								{&#xd;
									&quot;status&quot;: &quot;ContractActive&quot;&#xd;
								}&#xd;
							]&#xd;
						}&#xd;
					}&#xd;
				],&#xd;
				&quot;externalId&quot;: &quot;5b1ed71e-a24c-499f-b351-ed7ffbce6479&quot;,&#xd;
				&quot;cartItemId&quot;: &quot;5b1ed71e-a24c-499f-b351-ed7ffbce6479&quot;,&#xd;
				&quot;quantity&quot;: {&#xd;
					&quot;amount&quot;: 75&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	],&#xd;
	&quot;orderSpec&quot;: {&#xd;
		&quot;name&quot;: &quot;ProductOrder&quot;,&#xd;
		&quot;orderItemAddingType&quot;: &quot;ItemByItem&quot;,&#xd;
		&quot;characteristics&quot;: [&#xd;
			{&#xd;
				&quot;name&quot;: &quot;loadInstalledBaseStrategy&quot;,&#xd;
				&quot;value&quot;: &quot;NOSR&quot;&#xd;
			},&#xd;
			{&#xd;
				&quot;name&quot;: &quot;skipBasketRepricing&quot;,&#xd;
				&quot;value&quot;: &quot;true&quot;&#xd;
			}&#xd;
		]&#xd;
	},&#xd;
	&quot;requester&quot;: &quot;upadmin&quot;,&#xd;
	&quot;requestID&quot;: &quot;${orderId}&quot;,&#xd;
	&quot;actionScope&quot;: &quot;PerItemUnderPOOI&quot;,&#xd;
	&quot;shoppingCartId&quot;: &quot;21354-9210-10016999-383842434&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/eoc/om/v1/order/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Create Order </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extractOrderID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extractState" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">state</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;/opt/erinksh/result/orderIds&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;${orderID}&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">6000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check order status" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/opt/erinksh/result/orderIds</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">orderID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller - Get Token" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get CWToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server_eoc}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/eoc/avmSecurity/getToken</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic dXBhZG1pbjp1cGFkbWlu</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CWToken Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.cwtoken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">po1chara = vars.get(&quot;PO1CHARA&quot;);
po3chara = vars.get(&quot;PO3CHARA&quot;);
po5chara = vars.get(&quot;PO5CHARA&quot;);
bpo = vars.get(&quot;BPO&quot;);


if (po1chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po1chara);
else if (po3chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po3chara);
else if (po5chara != &quot;&quot;)
  props.put(&quot;PONAME&quot;, po5chara);
else
  props.put(&quot;PONAME&quot;, bpo);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_OM_Order" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${cpq_server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${cpq_protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/eoc/om/v1/order/${orderID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
          <stringProp name="TestPlan.comments">Create Order </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${cwtoken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Proxy-Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${cpq_server}:${cpq_port}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extractOrderStatus" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderState</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extractState" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">state</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">

 // pass true if want to append to existing file  
 // if want to overwrite, then don&apos;t pass the second argument
 FileWriter fstream = new FileWriter(&quot;/opt/erinksh/result/orderStatus&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;${orderID},${orderState}&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
